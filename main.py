import os
import logging
import uvicorn
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher
from aiogram.types import Update

from bot import get_bot, get_dispatcher
from database import engine, Base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä, https://onestep-bot.onrender.com
PORT = int(os.getenv("PORT", 8000))
WEBHOOK_PATH = "/webhook"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ FastAPI
bot = get_bot()
dp = get_dispatcher()
app = FastAPI()

# Webhook endpoint
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    update = Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"ok": True}

# Startup
@app.on_event("startup")
async def on_startup():
    if not WEBHOOK_URL:
        logging.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")
    else:
        await bot.set_webhook(f"{WEBHOOK_URL}{WEBHOOK_PATH}")
        logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}{WEBHOOK_PATH}")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# Shutdown
@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logging.info("üîå Webhook —É–¥–∞–ª—ë–Ω.")

# –ó–∞–ø—É—Å–∫ uvicorn
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=PORT)
