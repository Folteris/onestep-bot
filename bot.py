
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = '7606994315:AAGuq7yqLks531exYmD8zGEPc4A_Kh9AA3s'

# Enable logging
logging.basicConfig(level=logging.INFO)

# Bot and Dispatcher
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# FSM states for registration
class Form(StatesGroup):
    name = State()
    age = State()
    city = State()
    photo = State()
    bio = State()

# Simple in-memory storage (replace with DB later)
users = {}

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await Form.name.set()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await Form.next()
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

@dp.message_handler(state=Form.age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    await state.update_data(age=int(message.text))
    await Form.next()
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")

@dp.message_handler(state=Form.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await Form.next()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ")

@dp.message_handler(content_types=types.ContentType.PHOTO, state=Form.photo)
async def process_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await Form.next()
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ")

@dp.message_handler(state=Form.bio)
async def process_bio(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['bio'] = message.text
    users[message.from_user.id] = data
    await message.answer("üéâ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await state.finish()

@dp.message_handler(commands='show')
async def show_random_profile(message: types.Message):
    for user_id, data in users.items():
        if user_id != message.from_user.id:
            text = f"üë§ {data['name']}, {data['age']} –ª–µ—Ç\nüìç {data['city']}\nüìù {data['bio']}"
            await bot.send_photo(message.chat.id, data['photo'], caption=text)
            return
    await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
