import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, ContentType
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = '7606994315:AAGuq7yqLks531exYmD8zGEPc4A_Kh9AA3s'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Form(StatesGroup):
    name = State()
    age = State()
    country = State()
    city = State()
    goal = State()
    bio = State()
    photo = State()

users = {}

COUNTRIES = ['–£–∫—Ä–∞–∏–Ω–∞', '–ü–æ–ª—å—à–∞']
CITIES = {
    '–£–∫—Ä–∞–∏–Ω–∞': ['–ö–∏–µ–≤', '–õ—å–≤–æ–≤', '–•–∞—Ä—å–∫–æ–≤'],
    '–ü–æ–ª—å—à–∞': ['–í–∞—Ä—à–∞–≤–∞', '–ö—Ä–∞–∫–æ–≤', '–ì–¥–∞–Ω—å—Å–∫']
}
GOALS = ['–û–±—â–µ–Ω–∏–µ', '–î—Ä—É–∂–±–∞', '–û—Ç–Ω–æ—à–µ–Ω–∏—è']

@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    if message.from_user.id in users:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")]],
            resize_keyboard=True
        )
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–≥–æ-—Ç–æ üòâ", reply_markup=kb)
    else:
        await state.set_state(Form.name)
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    await state.update_data(age=int(message.text))
    await state.set_state(Form.country)
    keyboard = InlineKeyboardMarkup()
    for country in COUNTRIES:
        keyboard.add(InlineKeyboardButton(text=country, callback_data=f"country_{country}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("country_"))
async def process_country(callback_query: CallbackQuery, state: FSMContext):
    country = callback_query.data.split('_')[1]
    await state.update_data(country=country)
    await state.set_state(Form.city)
    keyboard = InlineKeyboardMarkup()
    for city in CITIES[country]:
        keyboard.add(InlineKeyboardButton(text=city, callback_data=f"city_{city}"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("city_"))
async def process_city(callback_query: CallbackQuery, state: FSMContext):
    city = callback_query.data.split('_')[1]
    await state.update_data(city=city)
    await state.set_state(Form.goal)
    keyboard = InlineKeyboardMarkup()
    for goal in GOALS:
        keyboard.add(InlineKeyboardButton(text=goal, callback_data=f"goal_{goal}"))
    await bot.send_message(callback_query.from_user.id, "–ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –∏—â–µ—à—å?", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("goal_"))
async def process_goal(callback_query: CallbackQuery, state: FSMContext):
    goal = callback_query.data.split('_')[1]
    await state.update_data(goal=goal)
    await state.set_state(Form.bio)
    await bot.send_message(callback_query.from_user.id, "–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ")

@dp.message(Form.bio)
async def process_bio(message: Message, state: FSMContext):
    await state.update_data(bio=message.text)
    await state.set_state(Form.photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ")

@dp.message(Form.photo, F.content_type == ContentType.PHOTO)
async def process_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    data['photo'] = message.photo[-1].file_id
    users[message.from_user.id] = data
    await state.clear()
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")]],
        resize_keyboard=True
    )
    await message.answer("üéâ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ª—é–¥–µ–π üëá", reply_markup=kb)

@dp.message(F.text == "/find")
@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def find_by_button(message: Message):
    await find_match(message)

async def find_match(message: Message):
    user = users.get(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /start")
    for user_id, data in users.items():
        if user_id != message.from_user.id and data['city'] == user['city'] and data['goal'] == user['goal']:
            text = f"üë§ {data['name']}, {data['age']} –ª–µ—Ç\nüìç {data['city']}, {data['country']}\nüåü –¶–µ–ª—å: {data['goal']}\nüìù {data['bio']}"
            await bot.send_photo(message.chat.id, data['photo'], caption=text)
            return
    await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

def get_bot():
    return bot

def get_dispatcher():
    return dp
