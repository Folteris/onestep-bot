import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from redis.asyncio import Redis
from aiogram.fsm.storage.redis import RedisStorage
from sqlalchemy import select
from database import User, get_session

logging.basicConfig(level=logging.INFO)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", None)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis-–∫–ª–∏–µ–Ω—Ç–∞
redis_client = Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –≤ Redis
storage = RedisStorage(redis=redis_client)

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–∫–∏ —Å—Ç—Ä–∞–Ω, –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ü–µ–ª–µ–π
COUNTRIES = ['–£–∫—Ä–∞–∏–Ω–∞', '–ü–æ–ª—å—à–∞']
CITIES = {
    '–£–∫—Ä–∞–∏–Ω–∞': ['–ö–∏–µ–≤', '–õ—å–≤–æ–≤', '–•–∞—Ä—å–∫–æ–≤', '–û–¥–µ—Å—Å–∞', '–î–Ω–µ–ø—Ä', '–ó–∞–ø–æ—Ä–æ–∂—å–µ', '–ß–µ—Ä–Ω–∏–≥–æ–≤', '–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫', '–¢–µ—Ä–Ω–æ–ø–æ–ª—å'],
    '–ü–æ–ª—å—à–∞': ['–í–∞—Ä—à–∞–≤–∞', '–ö—Ä–∞–∫–æ–≤', '–ì–¥–∞–Ω—å—Å–∫']
}
GOALS = ['–û–±—â–µ–Ω–∏–µ', '–î—Ä—É–∂–±–∞', '–û—Ç–Ω–æ—à–µ–Ω–∏—è']

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Form(StatesGroup):
    name = State()
    age = State()
    country = State()
    city = State()
    goal = State()
    bio = State()
    photo = State()

@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ /start
    await state.clear()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with get_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalars().first()
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            kb = ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add(KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
            await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!", reply_markup=kb)
            return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def get_name(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

@dp.message(Form.age)
async def get_age(message: types.Message, state: FSMContext):
    # –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    await state.update_data(age=int(message.text))
    await state.set_state(Form.country)
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup()
    for country in COUNTRIES:
        keyboard.add(InlineKeyboardButton(text=country, callback_data=f"country_{country}"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("country_"))
async def get_country(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –∏–∑ callback_data
    country = callback.data.split("_", 1)[1]
    await state.update_data(country=country)
    await state.set_state(Form.city)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    keyboard = InlineKeyboardMarkup()
    for city in CITIES.get(country, []):
        keyboard.add(InlineKeyboardButton(text=city, callback_data=f"city_{city}"))
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("city_"))
async def get_city(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", 1)[1]
    await state.update_data(city=city)
    await state.set_state(Form.goal)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ü–µ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
    keyboard = InlineKeyboardMarkup()
    for goal in GOALS:
        keyboard.add(InlineKeyboardButton(text=goal, callback_data=f"goal_{goal}"))
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text("–ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –∏—â–µ—à—å?", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("goal_"))
async def get_goal(callback: types.CallbackQuery, state: FSMContext):
    goal = callback.data.split("_", 1)[1]
    await state.update_data(goal=goal)
    await state.set_state(Form.bio)
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø—Ä–æ—Å–∏–º —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ
    await callback.message.edit_text("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")
    await callback.answer()

@dp.message(Form.bio)
async def get_bio(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É —Ñ–æ—Ç–æ
    await state.update_data(bio=message.text)
    await state.set_state(Form.photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ")

@dp.message(Form.photo, F.photo)
async def get_photo(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∏–∑ FSM
    data = await state.get_data()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with get_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalars().first()
        if not user:
            user = User(telegram_id=message.from_user.id)
        user.name = data['name']
        user.age = data['age']
        user.country = data['country']
        user.city = data['city']
        user.goal = data['goal']
        user.bio = data['bio']
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–π (—Å–∞–º–æ–π –∫—Ä—É–ø–Ω–æ–π) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        user.photo = message.photo[-1].file_id
        session.add(user)
        await session.commit()
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    await state.clear()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
    await message.answer("üéâ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ª—é–¥–µ–π.", reply_markup=kb)

@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def find_match(message: types.Message):
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        me = result.scalars().first()
        if not me:
            return await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        # –ò—â–µ–º –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–º –∂–µ –≥–æ—Ä–æ–¥–æ–º –∏ —Ü–µ–ª—å—é
        match_query = await session.execute(
            select(User).where(
                User.city == me.city,
                User.goal == me.goal,
                User.telegram_id != me.telegram_id
            )
        )
        match = match_query.scalars().first()
        if not match:
            return await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        text = (
            f"üë§ {match.name}, {match.age} –ª–µ—Ç\n"
            f"üìç {match.city}, {match.country}\n"
            f"üåü –¶–µ–ª—å: {match.goal}\n"
            f"üìù {match.bio}"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å)
        await bot.send_photo(chat_id=message.chat.id, photo=match.photo, caption=text)

# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (long polling)
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
