import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from redis.asyncio import Redis
from aiogram.fsm.storage.redis import RedisStorage
from sqlalchemy import select
from database import User, get_session

logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", None)

# –°–æ–∑–¥–∞—ë–º Redis –∫–ª–∏–µ–Ω—Ç
redis_client = Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    password=REDIS_PASSWORD,
    decode_responses=True,
)

# –°–æ–∑–¥–∞—ë–º storage –¥–ª—è FSM –Ω–∞ –±–∞–∑–µ Redis
storage = RedisStorage(redis=redis_client)

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=storage)

COUNTRIES = ['–£–∫—Ä–∞–∏–Ω–∞', '–ü–æ–ª—å—à–∞']
CITIES = {
    '–£–∫—Ä–∞–∏–Ω–∞': ['–ö–∏–µ–≤', '–õ—å–≤–æ–≤', '–•–∞—Ä—å–∫–æ–≤', '–û–¥–µ—Å—Å–∞', '–î–Ω–µ–ø—Ä', '–ó–∞–ø–æ—Ä–æ–∂—å–µ', '–ß–µ—Ä–Ω–∏–≥–æ–≤', '–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫', '–¢–µ—Ä–Ω–æ–ø–æ–ª—å'],
    '–ü–æ–ª—å—à–∞': ['–í–∞—Ä—à–∞–≤–∞', '–ö—Ä–∞–∫–æ–≤', '–ì–¥–∞–Ω—å—Å–∫']
}
GOALS = ['–û–±—â–µ–Ω–∏–µ', '–î—Ä—É–∂–±–∞', '–û—Ç–Ω–æ—à–µ–Ω–∏—è']

class Form(StatesGroup):
    name = State()
    age = State()
    country = State()
    city = State()
    goal = State()
    bio = State()
    photo = State()

@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    async with get_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalars().first()
        if user:
            kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")]], resize_keyboard=True)
            await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!", reply_markup=kb)
            return
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

@dp.message(Form.age)
async def get_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    await state.update_data(age=int(message.text))

    await state.set_state(Form.country)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ _–¥–æ_ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

    keyboard = InlineKeyboardMarkup(row_width=1)
    for country in COUNTRIES:
        keyboard.add(InlineKeyboardButton(text=country, callback_data=f"country_{country}"))

    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("country_"))
async def get_country(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_", 1)[1]
    await state.update_data(country=country)

    keyboard = InlineKeyboardMarkup(row_width=1)
    for city in CITIES.get(country, []):
        keyboard.add(InlineKeyboardButton(text=city, callback_data=f"city_{city}"))

    await state.set_state(Form.city)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("city_"))
async def get_city(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", 1)[1]
    await state.update_data(city=city)

    keyboard = InlineKeyboardMarkup(row_width=1)
    for goal in GOALS:
        keyboard.add(InlineKeyboardButton(text=goal, callback_data=f"goal_{goal}"))

    await state.set_state(Form.goal)
    await callback.message.edit_text("–ß—Ç–æ —Ç—ã —Å–µ–≥–æ–¥–Ω—è –∏—â–µ—à—å?", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("goal_"))
async def get_goal(callback: types.CallbackQuery, state: FSMContext):
    goal = callback.data.split("_", 1)[1]
    await state.update_data(goal=goal)
    await state.set_state(Form.bio)
    await callback.message.edit_text("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ")
    await callback.answer()

@dp.message(Form.bio)
async def get_bio(message: types.Message, state: FSMContext):
    await state.update_data(bio=message.text)
    await state.set_state(Form.photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ")

@dp.message(Form.photo, F.photo)
async def get_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    async with get_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalars().first()
        if not user:
            user = User(telegram_id=message.from_user.id)
        user.name = data['name']
        user.age = data['age']
        user.country = data['country']
        user.city = data['city']
        user.goal = data['goal']
        user.bio = data['bio']
        user.photo = message.photo[-1].file_id
        session.add(user)
        await session.commit()

    await state.clear()
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")]], resize_keyboard=True)
    await message.answer("üéâ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ª—é–¥–µ–π.", reply_markup=kb)

@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def find_match(message: types.Message):
    async with get_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        me = result.scalars().first()
        if not me:
            return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")

        match_query = await session.execute(
            select(User).where(
                User.city == me.city,
                User.goal == me.goal,
                User.telegram_id != me.telegram_id
            )
        )
        match = match_query.scalars().first()
        if not match:
            return await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

        text = (
            f"\U0001F464 {match.name}, {match.age} –ª–µ—Ç\n"
            f"\U0001F4CD {match.city}, {match.country}\n"
            f"\U0001F31F –¶–µ–ª—å: {match.goal}\n"
            f"\U0001F4DD {match.bio}"
        )
        await bot.send_photo(message.chat.id, match.photo, caption=text)

def get_bot():
    return bot

def get_dispatcher():
    return dp
